[[{"l":"Ucumate","p":["Ucumate is a developer-friendly Java library for parsing, validating, canonicalizing, and converting units of measure based on the Unified Code for Units of Measure (UCUM) standard. It provides validation, canonicalization, and conversion support with high decimal precision if desired. Furthermore, all special units are supported.","TODO maven dependency","If you need high precision (especially when special units are involved) then you should use the ucumate-core-exact-special-math module.","todo maven special math dependency","If you need data persistence across restarts you can use the ucumate-persistence module.","todo maven persistence dependency"]}],[{"l":"Getting Started"},{"l":"Add dependency","p":["todo"]},{"l":"Core Functionality","p":["Use the UCUMService class to access the core functionality. This includes printing, validation, canonicalization and conversion.","Read more about the parameter and return types of the UCUMService class in the core functionality documentation."]}],[{"l":"Core Functionality","p":["The ucumate library has three core features:","Printing of UCUM expressions","Validation of UCUM expressions","Canonicalization of UCUM expressions","Conversion UCUM expressions","All functionality can be accessed through a single class: UCUMService. The library heavily uses sealed interface together with switch pattern matching.","By default, the core library caches validation and canonicalization results. Therefore, any subsequent calls to the same expressions lead to blazingly fast results. So the longer the app runs, the faster the answers on average get. You can change these cache settings if desired. You can also add persistent storage if needed."]},{"l":"Printing","p":["Printing more detailed information about a given UCUM expression is very important. Currently, there are 4 print modes:","UCUM Syntax: The parsed UCUM expression is printed in valid UCUM syntax.","Expressive UCUM Syntax: Includes the human-readable name when printing a unit. May be used to understand how an expression has been parsed.","Common Math Syntax: Prints in UCUM Syntax but replaces the math operators with more commonly used ones (i.e. . -> *, + -> ^).","LaTeX Syntax: Produces a string that most LaTeX parsers should be able to process and render.","For example, cm/(s.g2) prints the following:","UCUM Syntax: cm/(s.g+2)","Expressive UCUM Syntax: c (centi)m (meter)/(s (second).g (gram)+2)","Common Math Syntax: cm/(s*g^2)","LaTeX Syntax: \\frac{\\mathrm{cm}}{\\left(\\mathrm{s} \\cdot \\mathrm{g}^{2}\\right)} which renders to rendered_latex","The default printing mode is the UCUM syntax. It is accessible through the UCUMService#print method.","You may also specify the print mode with another parameter."]},{"l":"Validation","p":["UCUMService#validate(String input) can be used to validate any given UCUM expression. The result is either a Success containing the parsed Term or a Failure.","If you are only interested whether a given UCUM expression is valid or invalid you may also use UCUMService#validateToBool(String input)."]},{"l":"Canonicalization","p":["UCUMService#canonicalize can be used to validate any given UCUM expression. The result is either a Success containing the parsed Term and its canonicalization factor obtained during the canonicalization or a FailedCanonicalization."]},{"l":"Conversion","p":["UCUMService#convert can be used to convert any given UCUM expression to another. The result is either a Success containing the resulting conversion facor or a FailedConversion."]}],[{"l":"Cache","p":["<empty list>","10000","A List of Common Codes to be used for Preheating","Below are the properties to control the cache behaviour.","By default, the core library has a built-in cache that is enabled. Any expression that is encountered during validation or canonicalization is being cached. If the cache is full then older entries will be removed.","Default Value","Description","Enables/Disables Cache","Enables/Disables Caffeine Stats Tracking","Enables/Disables Overriding default Common Codes List with A Custom Codes List","Enables/Disables Preheating the Cache with Common Codes","false","If you enable preheating then you have to initialize the cache once on startup.","If you want save the cache between restarts you can add the ucumate-persistence module that ships with a sqlite database by default. When the app starts everything from the data storage will be loaded into the cache.","Max size for Canonical Cache","Max size for Validation Cache","Property Name","true","ucumate.cache.enable","ucumate.cache.maxCanonSize","ucumate.cache.maxValSize","ucumate.cache.preheat","ucumate.cache.preheat.codes","ucumate.cache.preheat.override","ucumate.cache.recordStats"]}],[{"l":"Data Persistence","p":["The core library ships with a default caffeine cache for validation and canonicalization results. On top of that it is also possible to add another persistent data storage. If a persistent data storage is setup, then on startup all saved codes will be read into the cache (if the cache is enabled).","Add the additional dependency: todo persistence module dependency.","The module defines 4 persistence providers out of the box:","SQLite Provider","PostgreSQL Provider","MySQL Provider","MongoDB Provider","By default, the SQLite provider is enabled out of the box as soon as the ucumate-persistence dependency is added. If you want to use a different database option you can override the sqlite one with PersistenceRegistry#register.","The library will write any encountered code into the provided storage. On read, it first looks through the cache (if enabled) and only if it can't find it in the cache, it will query the data storage for it. If it's not in there yet, then it will be calculated once and stored both in cache (if enabled) and in the data storage.","You can also add your own persistence provider by implementing PersistenceProvider and registering it using PersistenceRegistry#register."]}],[{"l":"UCUM Tests","p":["Having a full testsuite to define accordance with the UCUM standard is important. The testsuite should cover a range of valid and invalid expressions and cover canonicalization and conversion including the resulting factors. Grahame Grieve maintains a functional XML testsuite that covers a lot of test cases.","ucumate passes all the validation and conversion tests defined by Grahame, the other test cases were not tested.","As part of developing the ucumate library, a new test suite has been developed. It is an accumulation of common UCUM codes together with extensive an extensive range of UCUM codes to cover edge cases.","Common UCUM codes in FHIR","Common UCUM units from UCUM","Custom tests","They were transformed into a single json file.","Note: The new testsuite is not meant to replace the XML testsuite (for now). The tests from the older testsuite are not all present in the JSON testsuite.","The core library fails some conversion tests due to limited precision when working with special units. The ucumate-core-exact-special-math implementation passes all tests, so use that if you require high precision.","JSON Testsuite"]}],[{"l":"Exact Math","p":["If you work with special units and need high precision during canonicalization or conversion then you should use this additional module.","todo maven part","It is meant as a drop-in replacement for the default math precision in ucumate-core. On startup, you have set the provider once.","Under the hood it uses big-math to perform the complex math operations that are necessary when working with special units. It is much slower than the native but imprecise one. This implementation does not suffer from the floating point precision error that may occur in some canonicalizations or conversions."]}]]